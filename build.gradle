import org.ajoberstar.grgit.*

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.2.0'
    }
}

plugins {
    id "de.undercouch.download" version "1.2"
}

/******************************************************************************
 ***                      Version number variables                          ***
 ******************************************************************************/
project.ext {
}


/**************************************************************************************
 ***                                Path definitions                                ***
 **************************************************************************************/
def libFolder = "$projectDir/static/resources/libs"
def closureFolder = file("$libFolder/closure-library")
def closureCompilerFolder = file("$libFolder/jsCompiler")
def soyCompilerFolder = file("$libFolder/soyCompiler")
def jsSrcDir = file("$projectDir/static/resources/js")

//def tmplFolder = "$projectDir/src/main/resources/templates"
//def jsLibDir = "$projectDir/src/main/resources/javascripts/libs"
//def jsTestDir = "$projectDir/src/test/javascript"
//def jsSpecRunnerName = "TestSpecRunner.html"                // Default jasmine Specrunner -> will be replaced
//def chromeDriverPath = "$buildDir/chromeDriver"
//def jasminePath = "$buildDir/jasmine"
//def closureFolder = "$buildDir/Closure";
//def closureLibraryFolder = "$closureFolder/library";
//def closureCompilerFolder = "$closureFolder/compiler";
//def closureTmplCompilerFolder = "$closureFolder/closure-templates";
////def closureTmplErrorFile = "$closureFolder/templ-error.txt";
//def closureBinFolder = "$closureLibraryFolder/closure/bin";
//def jsMainClass = "cake.app.AppStart";

/**************************************************************************************
 ***                    Helper tasks for setting up closure                         ***
 **************************************************************************************/
// Download the closure library
task downloadLibs << {
    // 1) Check for the closure library, and if non-existent, clone it from github
    if (!closureFolder.exists()) {
        println '>>> Cloning closure-library'
        Grgit.clone(dir: closureFolder, uri: 'git@github.com:google/closure-library.git')
    }
    // 2) Check if the closure compiler exists, and if not, download and unzip
    if (!closureCompilerFolder.exists()) {
        closureCompilerFolder.mkdirs()
        download {
            src 'http://dl.google.com/closure-compiler/compiler-latest.zip'
            dest "$closureCompilerFolder/compiler-latest.zip"
        }
        println '>>> Unzipping closure compiler'
        copy {
            from zipTree(file("$closureCompilerFolder/compiler-latest.zip"))
            into "$closureCompilerFolder"
            fileMode 0755
        }
    }
    // 3) Check if the closure template (soy) compiler exists, and if not, download it
    if (!soyCompilerFolder.exists()) {
        soyCompilerFolder.mkdirs()
        download {
            src 'https://closure-templates.googlecode.com/files/closure-templates-for-javascript-latest.zip'
            dest "$soyCompilerFolder/closure-templates-for-javascript-latest.zip"
        }
        println '>>> Unzipping soy template compiler'
        copy {
            from zipTree(file("$soyCompilerFolder/closure-templates-for-javascript-latest.zip"))
            into "$soyCompilerFolder"
            fileMode 0755
        }
        println '>>> Copying soyutils JS file into js source folder'
        // 3a) Copy the soyutils JS file into the js source folder
        copy {
            from file("$soyCompilerFolder/soyutils_usegoog.js")
            into jsSrcDir
            fileMode 0755
        }
    }
}

///**************************************************************************************
// ***                   Helper tasks for JS Compilation with closure                 ***
// **************************************************************************************/
///**
// * java -jar SoyToJsSrcCompiler.jar --outputPathFormat simple.js --srcs simple.soy
// */
//task buildTemplFile(dependsOn: unpackClosureTemplates, group: "JS Compile") {
//    String jarPath = new File("$closureTmplCompilerFolder", "SoyToJsSrcCompiler.jar")
//    String nsParam = "--shouldProvideRequireSoyNamespaces"
//    String opParamName = "--outputPathFormat"
//    String opParam = "$jsSrcDir/cake-templates.js"
//    String srcParamName = "--srcs"
//    String srcParam = fileTree(dir: "$tmplFolder", include: "**/*.soy").files.collect { it.path }.join(",")
////    println("\t#### " + srcParam);
//    doLast {
//        javaexec
//        {
//            workingDir = "$tmplFolder";
//            main = '-jar';
//            args = [jarPath, nsParam, opParamName, opParam, srcParamName, srcParam];
//        }
//    }
//}
//buildTemplFile.mustRunAfter("unpackClosureTemplates")
//
///**
// * Runs the google closure depswriter python script to create a new JS dependency file for all
// * Cake namespaces and writes it into the /resources/javascripts/cake folder
// *
// * CURRENT ASSUMPTIONS:
// *  - linux system
// *  - python is installed and executable from within the users environment
// *  - google closure is available at the above define constant path
// *
// * CODE/TASK ENHANCEMENTS:
// *  - needs code enhancement for Windows systems
// *  - closure should be downloaded before this task is run
// *  - at least some output, that python needs to be installed
// *
// * Live on console:
// /home/lion/Projects/Closure/closure/bin/build/depswriter.py \
// --root_with_prefix="/home/lion/Projects/Cake/main/com.redro.cake.web/src/main/resources/javascripts/cake ../../../cake" \
// > /home/lion/Projects/Cake/main/com.redro.cake.web/src/main/resources/javascripts/cake/cake-deps.js
// */
//task buildDepFile(type: Exec, group: "JS Compile") {
//    dependsOn(unpackClosureLibrary)
//    dependsOn(buildTemplFile)
//    workingDir "$jsSrcDir"
//    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//        // on windows:
//        commandLine 'cmd', '/c', "$closureBinFolder/build/depswriter.py"
//    } else {
//        executable "$closureBinFolder/build/depswriter.py"
//    }
//    // HINT: MAGIC! The gradle arg doesn't need the surrounding quotes for both paths
//    args "--root_with_prefix=$jsSrcDir ../../../cake"
//    standardOutput = new FileOutputStream(new File("$jsSrcDir/cake-deps.js"))
//}
//buildDepFile.mustRunAfter("unpackClosureLibrary")
//buildDepFile.mustRunAfter("buildTemplFile")
//
///**
// *
// * On Console:
// *  ./closurebuilder.py \
// *    --root=/home/lion/Projects/Cake/main/com.redro.cake.web/src/main/resources/javascripts/cake/ \
// *    --root=/home/lion/Projects/Cake/main/com.redro.cake.web/src/main/resources/javascripts/libs/closure/ \
// *    -ncake.gall.galleryStart \
// *    -c../../../compiler/compiler.jar \
// *    --output_mode=compiled \
// *    --compiler_flags="--compilation_level=ADVANCED_OPTIMIZATIONS" \
// *    > foo.js 2> err.txt
// */
//task compileJS(type: Exec, group: "JS Compile") {
//    dependsOn(unpackClosureCompiler)
//    dependsOn(unpackClosureLibrary)
//    workingDir "$jsSrcDir"
//    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//        // on windows:
//        commandLine 'cmd', '/c', "$closureBinFolder/build/closurebuilder.py"
//    } else {
//        executable "$closureBinFolder/build/closurebuilder.py"
//    }
//    // HINT: MAGIC! The gradle arg doesn't need the surrounding quotes for both paths
//    args "--root=$jsSrcDir","--root=$jsLibDir/closure","--namespace=$jsMainClass",
//            "--compiler_jar=$closureCompilerFolder/compiler.jar","--output_mode=compiled" //,
//    //"--compiler_flags=--compilation_level=ADVANCED_OPTIMIZATIONS"
//    standardOutput = new FileOutputStream(file("$jsSrcDir/cake-compiled.js"))
////    errorOutput = new FileOutputStream(file("$jsSrcDir/cake-compile-error.txt"))
//}
//compileJS.mustRunAfter("unpackClosureLibrary")
//compileJS.mustRunAfter("unpackClosureCompiler")
//
///**
// *
// * console command is:
// java -jar /home/lion/Projects/Closure/jsdoc_toolkit-2.4.0/jsdoc-toolkit/jsrun.jar \
// /home/lion/Projects/Closure/jsdoc_toolkit-2.4.0/jsdoc-toolkit/app/run.js \
// -t=/home/lion/Projects/Closure/jsdoc_toolkit-2.4.0/jsdoc-toolkit/templates/docstrape_tmpl/ \
// -d=/home/lion/cake-doc -r=4 \
// /home/lion/Projects/Cake/main/com.redro.cake.web/src/main/resources/javascripts/cake/
// * /
// task generateJSDoc(type: Exec, group: "JS Compile") {
//
// }
//
///**************************************************************************************
// ***                            Helper tasks for Tests                              ***
// **************************************************************************************/
//
////// Download the Chrome browser driver to emulate a chrome browser
////task downloadChromeDriver(type: UrlDownload, group: "JS Test") {
////    def osDepURL = Os.isFamily(Os.FAMILY_WINDOWS) ?
//////        "https://chromedriver.googlecode.com/files/chromedriver_win32_2.3.zip" :
//////        "https://chromedriver.googlecode.com/files/chromedriver_linux64_2.3.zip";
////        "http://chromedriver.storage.googleapis.com/2.8/chromedriver_win32.zip" :
////        "http://chromedriver.storage.googleapis.com/2.8/chromedriver_linux64.zip";
////    url osDepURL
////    destination file("$buildDir/chromeDriver.zip")
////}
////// Unpack the Chrome emulator
////task unpackChromeDriver(type: Copy, dependsOn: downloadChromeDriver, group: "JS Test") {
////    from zipTree(files(downloadChromeDriver).singleFile)
////    into "$chromeDriverPath"
////}
////// Download the Jasmine JS testing framework
////// PROBLEM: Zips can no longer be downloaded from github !!!!
////task downloadJasmine(type: UrlDownload, group: "JS Test") {
//////    url "http://cloud.github.com/downloads/pivotal/jasmine/jasmine-standalone-1.3.0.zip"
////    url "https://github.com/pivotal/jasmine/raw/66bd8c78257e11bc0b1d9411c3ab53c81bec4f46/dist/jasmine-standalone-2.0.0.zip"
////    destination file("$buildDir/jasmine.zip")
////}
////// Unpack the Jasmine JS framework
////task unpackJasmine(type: Copy, dependsOn: downloadJasmine, group: "JS Test") {
////    from zipTree(files(downloadJasmine).singleFile)
////    into "$jasminePath"
////    doLast {
////        delete("$buildDir/jasmine/spec/SpecHelper.js", "$buildDir/jasmine/spec/PlayerSpec.js",
////               "$buildDir/jasmine/SpecRunner.html")
////    }
////}
////
////// Copy all our JS source files (The files under test)
////task copyJSSources(type: Copy, group: "JS Test") {
//////    dependsOn("unpackJasmine")
////    dependsOn("buildDepFile")
////    from "$jsSrcDir"
////    include '**/*.js'
////    into "$buildDir/jasmine/cake"
////}
////// TODO: COMMENT TO RUN IN ONLINE MODE
//////copyJSSources.mustRunAfter unpackJasmine
////copyJSSources.mustRunAfter buildDepFile
////
////// Copy all libraries (external libraries)
////task copyJSLibs(type: Copy, /*TODO: UNCOMMENT TO RUN IN ONLINE MODE dependsOn: unpackJasmine,
////*/ group: "JS Test") {
////    from "$jsLibDir"
////    /*exclude '*-min.js', '*.min.js'*/
////    include '**/*.js'
////    into "$buildDir/jasmine/lib"
////}
////// TODO: COMMENT TO RUN IN ONLINE MODE
////copyJSLibs.mustRunAfter unpackJasmine
////
////// Copy all JS test files (The actual tests)
////task copyFuncSpecs(type: Copy, group: "JS Test") {
////    from "$jsTestDir/func"
////    include '*.js'
////    into "$buildDir/jasmine/spec"
////}
////// TODO: COMMENT TO RUN IN ONLINE MODE
////copyFuncSpecs.mustRunAfter unpackJasmine
////
////// Copy all JS test files (The actual tests)
////task copySystemSpecs(type: Copy, group: "JS Test") {
////    dependsOn("copyFuncSpecs")
////    from "$jsTestDir/sys"
////    include '*.js'
////    into "$buildDir/jasmine/spec"
////}
////copySystemSpecs.mustRunAfter unpackJasmine
////// Copy the HTML Spec file for functional tests
////// (Wrapper file which starts the execution of the tests)
////task copyFuncSpecRunner(type: Copy, group: "JS Test") {
////    from "$jsTestDir"
////    include 'Func_TestRunner.html'
////    into "$buildDir/jasmine"
////    rename { String fileName -> fileName = "$jsSpecRunnerName" }
////}
////copyFuncSpecRunner.mustRunAfter unpackJasmine
////// Copy the HTML Spec file for System tests
////// (Wrapper file which starts the execution of the tests)
////task copySystemSpecRunner(type: Copy, group: "JS Test") {
////    from "$jsTestDir"
////    include 'Sys_TestRunner.html'
////    into "$buildDir/jasmine"
////    rename { String fileName -> fileName = "$jsSpecRunnerName" }
////}
////copySystemSpecRunner.mustRunAfter unpackJasmine
////// Prepare JS test environment
////task prepareJSTests(group: "JS Test") {
////    dependsOn("unpackChromeDriver")
////    dependsOn("unpackJasmine")
////    dependsOn("copyJSSources")
////    dependsOn("copyJSLibs")
////}
////
////// OFFLINE MODE for JS tests: Prepare JS test environment
////task prepareJSTests_Offline(group: "JS Test") {
////    dependsOn("copyJSSources")
////    dependsOn("copyJSLibs")
////    dependsOn("copyFuncSpecs")
////}
////
////// Execute the actual jasmine tests in a Chrome browser
////task executeJasmineTests(type: BrowserEvaluate, group: "JS Test") {
////    content "$jasminePath"
////    resource "$jsSpecRunnerName" //"TestRunner.html"
////    result "$buildDir/result.html"
////
////    // Define Browser emulator (for now only chrome)
////    String driverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver";
////    File chromeDriverFilename = file(chromeDriverPath + "/" + driverFilename);
////    evaluator = new ChromeBrowserEvaluator(chromeDriverFilename)
////
////    doLast {
////        def specResultPath = "$buildDir/results"
////        copy {
////            into "$specResultPath"
////            from unpackJasmine, { include "lib/**/*", "src/**/*" }
////            from result
////        }
////        def resultFile = file("$specResultPath/$result.name")
////        // TODO: Enhance -> if JS loading errors we get a completely white page
////        if (resultFile.text.contains('<div class="suite failed">')) {
////            throw new GradleException("There are failing jasmine tests. See \n$resultFile\n");
////        }
////    }
////}
////
/////**
//// * Main Task for execution the functional tests
//// * @public
//// */
////task runFunctionTests(group: "JS Test") {
////    dependsOn("prepareJSTests")
////    dependsOn("copyFuncSpecs")
////    dependsOn("copyFuncSpecRunner")
////    dependsOn("executeJasmineTests")
////}
////runFunctionTests.mustRunAfter prepareJSTests
////runFunctionTests.mustRunAfter classes
////war.dependsOn runFunctionTests
/////**
//// * Main Task for execution all System tests (including functional tests)
//// * @public
//// */
////task runSystemTests(group: "JS Test") {
////    dependsOn("prepareJSTests")
////    dependsOn("copySystemSpecs")
////    dependsOn("copySystemSpecRunner")
////    dependsOn("executeJasmineTests")
////
////    doLast {
////        println("\tIMPORTANT: Webcake backend must run on localhost on port 8080!!!");
////    }
////}
////runSystemTests.mustRunAfter prepareJSTests
////runSystemTests.mustRunAfter classes
//
//processResources {
//    dependsOn(buildDepFile)
//    dependsOn(compileJS)
//    doLast{
//        //do some concatenation and minification
//    }
//}
//processResources.mustRunAfter buildDepFile
//processResources.mustRunAfter compileJS
//
///**************************************************************************************
// ***                          Helper classes for JS tests                           ***
// **************************************************************************************/
///**
// * Defines a generic task to download content from a URL.
// */
//class UrlDownload extends DefaultTask {
//    @Input
//    String url
//    @OutputFile
//    File destination
//
//    @TaskAction
//    void doDownload() {
////        try {
//            getDestination().withOutputStream { out ->
//                new URL(getUrl()).withInputStream { out << it }
//            }
////        } catch (SSLProtocolException ssle) {
////            // DO NOTHING!
////        }
//    }
//}
//
///**
// * Browser evaluator class used to fire up a ChromeBrowser and execute the jasmine JS tests on it.
// * Browsers are available from:
// *   https://code.google.com/p/chromedriver/downloads/list?can=1&q=&colspec=Summary+Filename+Uploaded+ReleaseDate+Size+DownloadCount+Release
// * More infos about ChromeDriver:
// *   https://code.google.com/p/selenium/wiki/ChromeDriver
// */
//class ChromeBrowserEvaluator implements BrowserEvaluator {
//    def chromeDriverPath;      // "C:\\temp\\chromedriver.exe"
//    public ChromeBrowserEvaluator(File aChromeDriverPath) {
//        this.chromeDriverPath = aChromeDriverPath;
//    }
//
//    void evaluate(String url, Writer writer) {
//        def service = new org.openqa.selenium.chrome.ChromeDriverService.Builder()
//                .usingChromeDriverExecutable(this.chromeDriverPath)
//                .usingAnyFreePort()
//                .build();
//        // List of possible switches: http://peter.sh/experiments/chromium-command-line-switches
//        def options = new org.openqa.selenium.chrome.ChromeOptions();
//        options.addArguments("--start-maximized");
//        // Necessary to allow call from chromedriver service to tomcat Cake server backend on different port
//        options.addArguments("--disable-web-security");
////        options.addArguments("--allow-file-access-from-files");
//        def capabilities = org.openqa.selenium.remote.DesiredCapabilities.chrome();
//        capabilities.setCapability(org.openqa.selenium.chrome.ChromeOptions.CAPABILITY, options);
//        def chrome = new org.openqa.selenium.chrome.ChromeDriver(service, capabilities);
//
//        try {
//            chrome.get(url)
//            // Sleep 2 seconds, to ensure results of finished AJAX calls are retrieved
//            Thread.sleep(2000);
//            writer << chrome.pageSource
//        } finally {
//            chrome.quit()
//            service.stop()
//        }
//    }
//}

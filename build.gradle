import org.ajoberstar.grgit.*
import org.apache.tools.ant.taskdefs.condition.Os


buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.2.0'
    }
}

plugins {
    id "de.undercouch.download" version "1.2"
}

// Because we have java-like code in the gradle file
apply plugin: 'java'

/**************************************************************************************************
 ***                                    Path definitions                                        ***
 **************************************************************************************************/
def libFolder = "$projectDir/static/resources/libs"
def closureFolder = file("$libFolder/closure-library")
def closureCompilerFolder = file("$libFolder/jsCompiler")
def closureBinFolder = "$closureFolder/closure/bin";
def soyCompilerFolder = file("$libFolder/soyCompiler")
def soyTmplFolder = "$projectDir/static/resources/soy"
def jsSrcDir = file("$projectDir/static/resources/js")
def jsMainClass = "wat.app";



/**************************************************************************************************
 ***                    Helper tasks for setting up GO dependencies                             ***
 **************************************************************************************************/
task downloadGoLibs << {
    // 1) First check, whether the GOPATH is set correctly, and error if not
    if (null == System.env.GOPATH) {
        println "GOPATH environment variable is not set"
        exit -1
    }
    // 2) If we have the GOPATH, check if godep is available, and if not download it
    if (!file('../../../bin/godep').exists()) {
        println ">>> Downloading godep to resolve all dependencies"
        exec {
            executable "go"
            args "get", "github.com/tools/godep"
        }
    }
    // 3) Now run godep to download all resolved dependencies
    println ">>> Start to resolve and download all GO dependencies for watney.\n" +
            "\tThis may take a while..."
    exec {
        executable "../../../bin/godep"
        args "restore"
    }
}


/**************************************************************************************************
 ***                    Helper tasks for setting up client dependencies                         ***
 **************************************************************************************************/
// Download the closure library
task downloadClientLibs << {
    println ">>> Be patient. This may take a while the first time ..."
    // 1) Check for the closure library, and if non-existent, clone it from github
    if (!closureFolder.exists()) {
        println '>>> Cloning closure-library'
        Grgit.clone(dir: closureFolder, uri: 'git@github.com:google/closure-library.git')
    }
    // 2) Check if the closure compiler exists, and if not, download and unzip
    if (!closureCompilerFolder.exists()) {
        closureCompilerFolder.mkdirs()
        download {
            src 'http://dl.google.com/closure-compiler/compiler-latest.zip'
            dest "$closureCompilerFolder/compiler-latest.zip"
        }
        println '>>> Unzipping closure compiler'
        copy {
            from zipTree(file("$closureCompilerFolder/compiler-latest.zip"))
            into "$closureCompilerFolder"
            fileMode 0755
        }
    }
    // 3) Check if the closure template (soy) compiler exists, and if not, download it
    if (!soyCompilerFolder.exists()) {
        soyCompilerFolder.mkdirs()
        download {
            src 'https://closure-templates.googlecode.com/files/closure-templates-for-javascript-latest.zip'
            dest "$soyCompilerFolder/closure-templates-for-javascript-latest.zip"
        }
        println '>>> Unzipping soy template compiler'
        copy {
            from zipTree(file("$soyCompilerFolder/closure-templates-for-javascript-latest.zip"))
            into "$soyCompilerFolder"
            fileMode 0755
        }
        println '>>> Copying soyutils JS file into js source folder'
        // 3a) Copy the soyutils JS file into the js source folder
        copy {
            from file("$soyCompilerFolder/soyutils_usegoog.js")
            into jsSrcDir
            fileMode 0755
        }
    }
}

/**
 * java -jar SoyToJsSrcCompiler.jar --outputPathFormat simple.js --srcs simple.soy
 */
task buildTemplFile(dependsOn: downloadClientLibs, group: "JS Compile") {
    String jarPath = new File("$soyCompilerFolder", "SoyToJsSrcCompiler.jar")
    String nsParam = "--shouldProvideRequireSoyNamespaces"
    String opParamName = "--outputPathFormat"
    String opParam = "$jsSrcDir/soy-templates.js"
    String srcParamName = "--srcs"
    String srcParam = fileTree(dir: "$soyTmplFolder", include: "**/*.soy").files.collect { it.path }.join(",")
//    println("\t#### " + srcParam);
    doLast {
        javaexec
        {
            workingDir = "$soyTmplFolder";
            main = '-jar';
            args = [jarPath, nsParam, opParamName, opParam, srcParamName, srcParam];
        }
    }
}

/**
 * Runs the google closure depswriter python script to create a new JS dependency file
 *
 * CURRENT ASSUMPTIONS:
 *  - linux system
 *  - python is installed and executable from within the users environment
 *  - google closure is available at the above define constant path
 *
 * CODE/TASK ENHANCEMENTS:
 *  - needs code enhancement for Windows systems
 *  - closure should be downloaded before this task is run
 *  - at least some output, that python needs to be installed
 */
task buildDepFile(type: Exec, group: "JS Compile") {
    dependsOn(buildTemplFile)
    workingDir "$jsSrcDir"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        // on windows:
        commandLine 'cmd', '/c', "$closureBinFolder/build/depswriter.py"
    } else {
        executable "$closureBinFolder/build/depswriter.py"
    }
    // HINT: MAGIC! The gradle arg doesn't need the surrounding quotes for both paths
    args "--root_with_prefix=$jsSrcDir ../../../../js/"
    standardOutput = new FileOutputStream(new File("$jsSrcDir/watney-deps.js"))
}

/**
 */
task compileJS(type: Exec, group: "JS Compile") {
    dependsOn(buildDepFile)
    workingDir "$jsSrcDir"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        // on windows:
        commandLine 'cmd', '/c', "$closureBinFolder/build/closurebuilder.py"
    } else {
        executable "$closureBinFolder/build/closurebuilder.py"
    }
    // HINT: MAGIC! The gradle arg doesn't need the surrounding quotes for both paths
    args "--root=$jsSrcDir","--root=$closureFolder","--namespace=$jsMainClass",
            "--compiler_jar=$closureCompilerFolder/compiler.jar","--output_mode=compiled" //,
    //"--compiler_flags=--compilation_level=ADVANCED_OPTIMIZATIONS"
    standardOutput = new FileOutputStream(file("$jsSrcDir/watney-compiled.js"))
//    errorOutput = new FileOutputStream(file("$jsSrcDir/watney-compile-error.txt"))
}

/**************************************************************************************************
 ***                               Build and assemble tasks                                     ***
 **************************************************************************************************/

task buildWatney(dependsOn:[downloadGoLibs, downloadClientLibs, compileJS]) {
    // 1) Now run go build
    doLast {
        println ">>> Building Watney ... "
        exec {
            executable "go"
            args "build", "mdrobek/watney"
        }
        println ">>> FINISHED"
    }
}

